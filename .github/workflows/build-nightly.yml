name: Build

concurrency:
  group: build-eden-${{ github.ref }}-${{ github.event.inputs.job_to_run || 'all' }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      job_to_run:
        type: choice
        description: 'Choose target build platform'
        options:
          - all
          - windows
          - appimage
          - macos
          - android
          - bsd
          - info
        default: 'all'

jobs:
  info:
    if: github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'info'
    runs-on: ubuntu-latest
    name: "Get info"
    strategy:
      matrix:
        target: [Info]
    steps:
      - uses: actions/checkout@v5.0.0
        with:
          persist-credentials: false

      - name: Get the latest release count
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          api_url="https://api.github.com/repos/${{ github.repository }}"
          latest_release_info=$(curl -H "Authorization: token $GH_TOKEN" "$api_url/releases/latest")
          last_release_tag=$(echo "$latest_release_info" | jq -r '.tag_name')
          echo "${last_release_tag}"
          old_count="${last_release_tag##*-}"
          echo "OLD_COUNT=$old_count" >> "$GITHUB_ENV"

      - name: Generate changelog
        run: |
          chmod +x ./changelog.sh
          ./changelog.sh

      - name: Upload tag file
        uses: actions/upload-artifact@v5.0.0
        with:
          name: tag
          path: ~/tag

      - name: Upload count file
        uses: actions/upload-artifact@v5.0.0
        with:
          name: count
          path: ~/count

      - name: Upload changelog file
        uses: actions/upload-artifact@v5.0.0
        with:
          name: changelog
          path: ~/changelog

      - name: Upload source code
        uses: actions/upload-artifact@v5.0.0
        with:
          name: source
          path: artifacts

  appimage:
    if: github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'appimage'
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: steamdeck
            runs-on: ubuntu-latest
            ccache: 'true'
          - target: rog
            runs-on: ubuntu-latest
            ccache: 'true'
          - target: common
            runs-on: ubuntu-latest
            ccache: 'true'
          - target: legacy
            runs-on: ubuntu-latest
            ccache: 'true'
          - target: aarch64
            runs-on: ubuntu-24.04-arm
            ccache: 'true'
          - target: steamdeck-pgo
            runs-on: ubuntu-latest
            ccache: 'flase'
          - target: rog-pgo
            runs-on: ubuntu-latest
            ccache: 'flase'
          - target: common-pgo
            runs-on: ubuntu-latest
            ccache: 'flase'
          - target: legacy-pgo
            runs-on: ubuntu-latest
            ccache: 'flase'
    container: 
      image: ghcr.io/pkgforge-dev/archlinux:latest
      options: --privileged --device /dev/fuse
    name: "Appimage (${{ matrix.target }})"
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
    steps:
      - uses: actions/checkout@v5.0.0
        with:
          persist-credentials: false

      - name: Install dependencies
        run: |
          chmod +x ./linux-dependencies.sh
          ./linux-dependencies.sh
          
      - name: Clone Eden
        run: |
          git clone 'https://git.eden-emu.dev/eden-emu/eden.git' ./eden

      - name: Restore ccache for ${{ matrix.target }}
        if: ${{ matrix.ccache == 'true'}}
        uses: actions/cache/restore@v4
        id: restore-ccache-appimage
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ matrix.target }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ matrix.target }}-

      - name: Compile Eden ${{ matrix.target }}
        run: |
          chmod +x ./eden-appimage.sh
          ./eden-appimage.sh ${{ matrix.target }}

      - name: Save ccache for ${{ matrix.target }}
        if: ${{ matrix.ccache == 'true' && github.ref_name == 'main' }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.restore-ccache-appimage.outputs.cache-primary-key }}

      - name: Upload appimage
        uses: actions/upload-artifact@v5.0.0
        with:
          name: eden-${{ matrix.target}}-appimage
          path: eden/appimage

      - name: Upload appbundle
        uses: actions/upload-artifact@v5.0.0
        with:
          name: eden-${{ matrix.target}}-appbundle
          path: eden/appbundle

  android:
    if: github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'android'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [Replace, Coexist, Optimized, Legacy]
    name: "Android (${{ matrix.target }})"
    env:
      TARGET: ${{ matrix.target }}
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
    steps:
      - uses: actions/checkout@v5.0.0

      - name: Install dependencies
        run: |
          sudo rm /var/lib/man-db/auto-update
          sudo apt-get update -y
          sudo apt-get install ccache glslang-tools libvulkan-dev python3-requests -y

      - name: Clone Eden
        run: |
          git clone 'https://git.eden-emu.dev/eden-emu/eden.git' ./eden

      - name: Restore ccache for ${{ matrix.target }}
        uses: actions/cache/restore@v4
        id: restore-ccache-cache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-android-ccache-${{ matrix.target }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-android-ccache-${{ matrix.target }}-

      - name: Compile Eden android
        run: |
          chmod +x ./eden-android.sh
          ./eden-android.sh

      - name: Save ccache for ${{ matrix.target }}
        if: ${{ github.ref_name == 'main' }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.restore-ccache-cache.outputs.cache-primary-key }}

      - name: Upload artifact
        uses: actions/upload-artifact@v5.0.0
        with:
          name: eden-android-${{ matrix.target }}
          path: eden/src/android/artifacts/

  windows:
    if: github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'windows'
    runs-on: ${{ matrix.runs-on }}
    name: "Windows ${{ matrix.target }} ${{ matrix.toolchain }} (${{ matrix.arch }})"
    strategy:
      fail-fast: false
      matrix:
        include:
           - toolchain: msvc
             target: normal
             arch: x86_64
             runs-on: windows-2022
          # - toolchain: msvc
          #   target: normal
          #   arch: arm64
          #   runs-on: windows-11-arm
          # - toolchain: clang
          #   target: normal
          #   arch: x86_64
          #   runs-on: windows-2022
          # - toolchain: clang
          #   target: PGO
          #   arch: x86_64
          #   runs-on: windows-2022
          # - toolchain: msys2
          #   target: PGO
          #   arch: x86_64
          #   runs-on: windows-2022
          # - toolchain: msys2
          #   target: normal
          #   arch: x86_64
          #   runs-on: windows-2022
    defaults:
      run:
        shell: ${{ matrix.toolchain == 'msys2' && 'msys2 {0}' || 'bash {0}' }}
    env:
      TOOLCHAIN: ${{ matrix.toolchain }}
      ARCH: ${{ matrix.arch }}
      TARGET: ${{ matrix.target }}
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
    steps:
      - uses: actions/checkout@v5.0.0

      - name: Set up MSVC
        if: ${{ matrix.toolchain != 'msys2' }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Set up MSYS2
        if: ${{ matrix.toolchain == 'msys2' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          cache: false
          install: git make p7zip autoconf libtool autoconf-archive base-devel zip unzip automake-wrapper automake
          pacboy: >-
            toolchain:p clang:p lld:p ccache:p cmake:p ffmpeg:p ninja:p lz4:p qt6-base:p qt6-tools:p
            qt6-translations:p qt6-svg:p glslang:p boost:p zstd:p rapidjson:p python-pip:p nlohmann-json:p libusb:p vulkan-devel:p

      - name: Install Qt
        if: ${{ matrix.toolchain != 'msys2' }}
        uses: jurplel/install-qt-action@v4.3.0
        with:
          version: '6.9.3'
          cache: 'true'

      - name: Install vulkan-sdk
        if: ${{ matrix.toolchain != 'msys2' }}
        shell: powershell
        run: |
          ./install-vulkan-sdk.ps1
          
      - name: install ccache
        if: ${{ matrix.toolchain != 'msys2' && matrix.target == 'normal' }}
        shell: bash
        run: |
          choco install ccache -y --no-progress
          
      - name: Update LLVM
        if: ${{ matrix.toolchain != 'msys2' && matrix.toolchain == 'clang' }}
        shell: bash
        run: |
          choco upgrade llvm --no-progress
          echo "C:/Program Files/LLVM/bin" >> $GITHUB_PATH
          
      - name: Clone Eden
        run: |
          git clone 'https://git.eden-emu.dev/eden-emu/eden.git' ./eden
          cd ./eden
          echo "VERSION=$(git rev-list --count HEAD)" >> "${GITHUB_ENV}"

      - name: Restore ccache
        if: ${{ matrix.target == 'normal' }}
        uses: actions/cache/restore@v4
        id: restore-ccache-windows
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ matrix.toolchain }}-${{ matrix.arch }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ matrix.toolchain }}-${{ matrix.arch }}-

      - name: Compile Eden Windows
        run: |
          chmod +x ./eden-windows.sh
          ./eden-windows.sh

      - name: Generate installer
        shell: cmd
        working-directory: ${{ github.workspace }}/installer
        run: |
          set TOOLCHAIN=%TOOLCHAIN%
          if /I "%TARGET%"=="PGO" set TOOLCHAIN=%TOOLCHAIN%-PGO
          makensis /DPRODUCT_TOOLCHAIN=%TOOLCHAIN% /DPRODUCT_VARIANT=%ARCH% /DPRODUCT_VERSION=%VERSION% eden.nsi
          mkdir artifacts 2>nul
          move /y *.exe artifacts\

      - name: Save ccache
        if: ${{ matrix.target == 'normal' && github.ref_name == 'main' }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.restore-ccache-windows.outputs.cache-primary-key }}

      - name: Upload Eden 7z
        uses: actions/upload-artifact@v5.0.0
        with:
          name: eden-windows-${{ matrix.toolchain }}-${{ matrix.target }}-7z-${{ matrix.arch }}
          path: eden/build/artifacts/

      - name: Upload Eden installer
        uses: actions/upload-artifact@v5.0.0
        with:
          name: eden-windows-${{ matrix.toolchain }}-${{ matrix.target }}-installer-${{ matrix.arch }}
          path: installer/artifacts/

  macos:
    if: github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'macos'
    runs-on: macos-latest
    name: "MacOS (${{ matrix.target }})"
    strategy:
      matrix:
        target: [arm64]
    env:
      TARGET: ${{ matrix.target }}
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
    steps:
      - uses: actions/checkout@v5

      - name: Clone Eden
        run: |
          git clone 'https://git.eden-emu.dev/eden-emu/eden.git' ./eden

      - name: Restore ccache for ${{ matrix.target }}
        uses: actions/cache/restore@v4
        id: restore-ccache-cache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-ccache-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-ccache-

      - name: Install dependencies
        run: |
          brew install --formula --quiet autoconf automake boost ccache glslang hidapi libiconv libtool nasm speexdsp vulkan-loader vulkan-headers vulkan-utility-libraries molten-vk

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.7.3
          cache: 'true'

      - name: Compile Eden MacOS (${{ matrix.target }})
        run: |
          chmod +x ./eden-macos.sh
          ./eden-macos.sh

      - name: Upload
        uses: actions/upload-artifact@v5.0.0
        with:
          name: eden-macos-${{ matrix.target }}
          path: eden/build/artifacts/

      - name: Save ccache for ${{ matrix.target }}
        if: ${{ github.ref_name == 'main' }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.restore-ccache-cache.outputs.cache-primary-key }}

  bsd:
    if: github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'bsd'
    name: ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [FreeBSD, Solaris]
    env:
      TARGET: ${{ matrix.target }}
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        
      - name: Clone Eden
        run: |
          git clone 'https://git.eden-emu.dev/eden-emu/eden.git' ./eden

      - name: Restore ccache
        if: matrix.target == 'FreeBSD'
        uses: actions/cache/restore@v4
        id: restore-ccache-freebsd
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-ccache-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-ccache-

      - name: Compile Eden FreeBSD
        if: matrix.target == 'FreeBSD'
        uses: vmactions/freebsd-vm@v1.2.4
        with:
          usesh: true
          envs: 'TARGET'
          run: |
            chmod +x ./BSD-dependencies.sh ./eden-BSD.sh
            ./BSD-dependencies.sh
            ./eden-BSD.sh

      - name: Compile Eden Solaris
        if: matrix.target == 'Solaris'
        uses: vmactions/solaris-vm@v1.1.5
        with:
          usesh: true
          envs: 'TARGET'
          run: |
            chmod +x ./BSD-dependencies.sh ./eden-BSD.sh
            ./BSD-dependencies.sh && ./eden-BSD.sh

      - name: Save ccache
        if: matrix.target == 'FreeBSD'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.restore-ccache-freebsd.outputs.cache-primary-key }}

      - name: Upload
        uses: actions/upload-artifact@v5.0.0
        with:
          name: eden-${{ matrix.target }}
          path: eden/build/artifacts/

  release:
    if: github.ref_name == 'main' && github.event.inputs.job_to_run == 'all'
    name: "release"
    needs: [info, appimage, windows, macos, android, bsd]
    permissions:
      actions: read
      security-events: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v6.0.0
        with:
          pattern: "*"
          merge-multiple: true

      - name: Generate changelog
        run: |
          echo "TAG=$(cat tag)" >> "${GITHUB_ENV}"
          echo "COUNT=$(cat count)" >> "${GITHUB_ENV}"
          echo "BODY<<EOF" >> "${GITHUB_ENV}"
          cat changelog >> "${GITHUB_ENV}"
          echo "EOF" >> "${GITHUB_ENV}"

      - name: Release Eden
        uses: softprops/action-gh-release@v2.4.1
        with:
          name: "Eden Unofficial Nightly Release: ${{ env.COUNT }}"
          tag_name: "${{ env.TAG }}"
          body: "${{ env.BODY }}"
          prerelease: false
          draft: false
          generate_release_notes: false
          fail_on_unmatched_files: false
          make_latest: true
          files: |
            *.AppImage*, *.AppBundle*, *.7z, *.tar.gz, *.exe, *.apk
